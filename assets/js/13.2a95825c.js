(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{223:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"名词解释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#名词解释"}},[t._v("#")]),t._v(" 名词解释")]),t._v(" "),a("p",[t._v("持续集成（Continuous Integration，简称 CI）")]),t._v(" "),a("p",[t._v("持续交付(Continuous Deployment，简称CD)")]),t._v(" "),a("p",[t._v("持续集成和持续部署通常与敏捷开发环境齐头并进。在这类环境中，团队希望在构建完成后立即将不同的代码段部署到生产环境中。")]),t._v(" "),a("p",[a("strong",[t._v("好处")]),t._v("：每次代码的小幅变更，就能看到运行结果，从而不断累积小的变更，而不是在开发周期结束时，一下子合并一大块代码。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.2cto.com/uploadfile/Collfiles/20180424/2018042409302768.jpg",alt:"图解CI/CD"}})]),t._v(" "),a("h2",{attrs:{id:"没有ci-cd-所引发的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#没有ci-cd-所引发的问题"}},[t._v("#")]),t._v(" 没有CI/CD 所引发的问题")]),t._v(" "),a("ul",[a("li",[t._v("上传 dist 文件到仓库导致完全无意义的冲突")]),t._v(" "),a("li",[t._v("build、忘记 build、操作机器浪费的时间")]),t._v(" "),a("li",[t._v("加了特技的 "),a("a",{attrs:{href:"https://github.com/vuejs/vue/graphs/contributors",target:"_blank",rel:"noopener noreferrer"}},[t._v("contribution"),a("OutboundLink")],1)])]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.99danji.com/uploadfile/2016/0419/20160419034745372.jpg",alt:"没有CI/CD 所引发的问题"}})]),t._v(" "),a("h3",{attrs:{id:"git-webhook机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-webhook机制"}},[t._v("#")]),t._v(" Git webhook机制")]),t._v(" "),a("ul",[a("li",[t._v('Webhooks是"user-defined HTTP回调"。它们通常由一些事件触发，例如"push 代码到repo"，或者"post 一个评论到博客"。')]),t._v(" "),a("li",[t._v("当事件发生时，源站点可以发起一个HTTP请求到webhook配置的URL。配置之后，用户可以通过在一个站点触发事件，调用另一个系统的任何操作。")])]),t._v(" "),a("p",[a("strong",[t._v("github 发送报文")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("// 后端发起请求\n// url 是 /payload\nPOST /payload HTTP/1.1\nHost: localhost:4567\n// 唯一识别分发的GUID\nX-Github-Delivery: 72d3162e-cc78-11e3-81ab-4c9367dc0958\n// HMAC十六进制的响应体。如果secret配置了，这个头信息将被发送。HMAC十六进制由sha1哈希算法生成，secret作为HMAC的key。\nX-Hub-Signature: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("sha1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("7d38cdd689735b008b3c702edd92eea23791c5f6\n// 神奇的UA\nUser-Agent: GitHub-Hookshot/044aadd\nContent-Type: application/json\nContent-Length: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6615")]),t._v("\n// 触发事件\nX-GitHub-Event: issues\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"action"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"opened"')]),t._v(",\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"issue"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"url"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://api.github.com/repos/octocat/Hello-World/issues/1347"')]),t._v(",\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"number"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1347")]),t._v(",\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(",\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"repository"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"id"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1296269")]),t._v(",\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"full_name"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"octocat/Hello-World"')]),t._v(",\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"owner"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"login"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"octocat"')]),t._v(",\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"id"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(",\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(",\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"https://developer.github.com/assets/images/payload_request_tab.png",alt:"官网示例"}})]),t._v(" "),a("p",[a("strong",[t._v("配置方法")])]),t._v(" "),a("ul",[a("li",[t._v("Github: 仓库界面 -> Settings -> Webhooks")]),t._v(" "),a("li",[t._v("Gitlab: 仓库界面 -> Settings -> Integrations")])]),t._v(" "),a("p",[a("strong",[t._v("以发布一个静态博客站点为例介绍三种CI/CD工具")])]),t._v(" "),a("h2",{attrs:{id:"travis-ci"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#travis-ci"}},[t._v("#")]),t._v(" Travis CI")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://www.ruanyifeng.com/blogimg/asset/2017/bg2017121901.png",alt:"Travis CI"}})]),t._v(" "),a("p",[t._v("只支持 Github。")]),t._v(" "),a("h3",{attrs:{id:"使用准备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用准备"}},[t._v("#")]),t._v(" 使用准备")]),t._v(" "),a("p",[t._v("在 (travis-ci.org)[https://travis-ci.org/] 绑定 github 账号。")]),t._v(" "),a("p",[t._v("Travis 会列出 Github 上面你的所有仓库，以及你所属于的组织。此时，选择你需要 Travis 帮你构建的仓库，打开仓库旁边的开关。一旦激活了一个仓库，Travis 会监听这个仓库的所有变化。")]),t._v(" "),a("h3",{attrs:{id:"travis-yml-配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#travis-yml-配置"}},[t._v("#")]),t._v(" .travis.yml 配置")]),t._v(" "),a("p",[t._v("在项目根目录下新建 "),a("code",[t._v(".travis.yml")]),t._v(" 文件。")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("language")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" node_js\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("sudo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" required\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("node_js")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" stable\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("branch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" dev\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cache")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("directories")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" node_modules\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("before_install")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" export TZ='Asia/Shanghai'  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置时区")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" ./deploy.sh\n")])])]),a("h3",{attrs:{id:"token-配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#token-配置"}},[t._v("#")]),t._v(" token 配置")]),t._v(" "),a("p",[t._v("github 左上头像 -> Settings -> Developer settings -> Persional access tokens -> Generate new token")]),t._v(" "),a("p",[t._v("除了 delete_repo 都选上，将生成的 token 复制。")]),t._v(" "),a("p",[t._v("在 Travis 选择要构建的仓库 左上 More options -> Settings -> Environment Variables 新建一个 access_token，粘贴刚才的 token。")]),t._v(" "),a("h3",{attrs:{id:"deploy-sh-配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deploy-sh-配置"}},[t._v("#")]),t._v(" deploy.sh 配置")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[t._v("#!/usr/bin/env sh")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 确保脚本抛出遇到的错误")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" -e\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 生成静态文件")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" run build\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 进入生成的文件夹")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" .vuepress/dist\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" -A\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'deploy'")]),t._v("\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --local user.name "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"youngerheart"')]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --local user.email "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"admin@timehub.cc"')]),t._v("\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -f https://"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${access_token}")]),t._v("@github.com/youngerheart/youngerheart.github.io.git master\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" -\n")])])]),a("h2",{attrs:{id:"jenkins"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jenkins"}},[t._v("#")]),t._v(" Jenkins")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cn.bing.com/th?id=OIP.RoGnyGsIDpGwq5UCdHpWpgHaFR&pid=Api&rs=1",alt:"Jenkins + Docker"}})]),t._v(" "),a("p",[t._v("支持 git 与 svn。")]),t._v(" "),a("h3",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" ~/Develop/jenkins\n\n// 新版貌似不用改权限了？ \n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("chown")]),t._v(" -R "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v(":1000 ~/Develop/jenkins/\n\n$ docker pull jenkins/jenkins\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lsof")]),t._v(" -i tcp:8000 // 查看端口占用\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" docker "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" -u root -it xxx /bin/bash // 进入容器\n\n$ docker run -d -p "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v(":8080 -p "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50000")]),t._v(":50000 -v /Users/younger/Develop/jenkins:/var/jenkins_home jenkins/jenkins\n")])])]),a("h3",{attrs:{id:"配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[t._v("#")]),t._v(" 配置")]),t._v(" "),a("ol",[a("li",[t._v("进入"),a("code",[t._v("localhost:8080")]),t._v(" ，在 Unlock Jenkins 中输入 "),a("code",[t._v("jenkins/secrets/initialAdminPassword")]),t._v(" 的初始密码。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"http://image.timehub.cc/images/2019/07/30/3734705-55dc998018a217fd.png",alt:"'初始密码'"}})]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("注册用户与安装插件，需要最新版 jenkins 否则插件可能安装不成功。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"http://image.timehub.cc/images/2019/07/30/3734705-b043f2d9fa0b355b.png",alt:"'安装插件'"}})]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("Manage Jenkins -> Configure System，输入 github 的 "),a("code",[t._v("access_token")]),t._v("。")]),t._v(" "),a("li",[t._v("创建一个 "),a("code",[t._v("Freestyle project")]),t._v("，Source Code Management 中设置 git 仓库，Build Environment 中勾选 Provide Node & npm bin/ folder to PATH")]),t._v(" "),a("li",[t._v("Build 中添加一个 "),a("code",[t._v("Excude shell")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ npm config set registry http://registry.npm.taobao.org\n$ npm install\n$ ./deploy.sh\n")])])]),a("h2",{attrs:{id:"gitlab-runner"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-runner"}},[t._v("#")]),t._v(" Gitlab runner")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitlab.com/uploads/-/system/project/avatar/250833/runner_logo.png",alt:"Gitlab runner"}})]),t._v(" "),a("h3",{attrs:{id:"原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),a("p",[a("em",[t._v("Pipelines: 官方提供的插件队列集合，用来实现和集成连续交付。")])]),t._v(" "),a("ol",[a("li",[t._v("Gitlab 服务器发放 url 与 token，拿去注册一个 runner，runner会通过轮训检查代码更新。")]),t._v(" "),a("li",[t._v("每当 push 代码到制定分支，在 Pipelines 中新增 stages 状态为 "),a("code",[t._v("Pending")]),t._v("，根据 "),a("code",[t._v(".gitlab-ci.yml")]),t._v(" 的配置 stages 中包含若干 jobs。")]),t._v(" "),a("li",[t._v("runner 轮训到 Pending 的仓库，开始执行 CI/CD，同时将 stages 状态变更为 "),a("code",[t._v("Running")])]),t._v(" "),a("li",[t._v("执行成功 "),a("code",[t._v("Success")]),t._v(" 失败 "),a("code",[t._v("Failed")])])]),t._v(" "),a("h3",{attrs:{id:"安装-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装-2"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),a("p",[t._v("首先需要有一台 Gitlab 服务器，一个有master及以上权限的项目。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("// mac\n$ brew update\n$ brew "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" gitlab-ci-multi-runner\n\n// CentOS\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bash")]),t._v("\n$ yum "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" gitlab-ci-multi-runner\n")])])]),a("p",[t._v("Gitlab -> Setting -> CI/CD -> Running settings -> Setup a specific Runner manually")]),t._v(" "),a("p",[t._v("找到 "),a("code",[t._v("following URL")]),t._v(" 与 "),a("code",[t._v("token")])]),t._v(" "),a("p",[t._v("runner 服务器中")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ gitlab-ci-multi-runner register // 填入上述信息，类型选择shell，tag 需要和 .gitlab-ci.yml中一致\n$ gitlab-ci-multi-runner verify  #激活runner\n$ gitlab-ci-multi-runner list    #查看当前runner\n$ gitlab-ci-multi-runner run     #运行runner\n")])])]),a("h3",{attrs:{id:"gitlab-ci-yml"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-ci-yml"}},[t._v("#")]),t._v(" .gitlab-ci.yml")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("stages:\n  - build\n\nbuild_dev:\n  stage: build\n  only:\n    - dev\n    - "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v("\n  tags:\n    - goo\n  cache:\n    paths:\n      - node_modules/\n  script:\n    - cnpm i\n    - cnpm run build:site\n    - "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rsync")]),t._v(" -av ./docs/dist/ /data/wwwroot/goo/\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);